###################################################
# AUTOMATIONS - POOL                              #
###################################################

  #Spring mode, runs pump all day, stop 4h, run 4h, stop 4h, run 12h
  #Summer mode, runs pump based on day of week (runs longer on fridays/saturdays)
  #Autumn mode, pump not running on peak hours
  #If temperature below 5Â°C, run pump
  #Pool water level has to be above low level since 2 minutes
  - alias: Pool Pump Control
    trigger:
      - platform: time_pattern
        seconds: '/5'
      - platform: state
        entity_id: input_select.poolpump_mode
    action:
      entity_id: switch.pool_pump
      service_template: >
        {% set curHour = now().hour %}
        {% set curWeekday = now().weekday() %}
        {% set PP = false %}
        
        {% if is_state('input_select.poolpump_mode', '24/7') %}
          {% set PP = true %}
        {% elif is_state('input_select.poolpump_mode', 'Spring') %}
          {% if curHour >= 8 and curHour < 20 %}
            {% set PP = true %}
          {% elif curHour >= 0 and curHour < 24 %}
            {% set PP = true %}
          {% endif %}
        {% elif is_state('input_select.poolpump_mode', 'Summer') %}
          {% if curWeekday in (0,1,2,3,6) %}
            {% if curHour >= 6 and curHour < 18 %}
              {% set PP = true %}
            {% elif curHour >= 22 or curHour < 2 %}
              {% set PP = true %}
            {% endif %}
          {% else %}
            {% if curHour >= 6 and curHour < 23 %}
              {% set PP = true %}
            {% elif curHour >= 1 or curHour < 4 %}
              {% set PP = true %}
            {% endif %}
          {% endif %}
        {% elif is_state('input_select.poolpump_mode', 'Autumn') %}
          {% if curHour >= 2 and curHour < 6 %}
            {% set PP = true %}
          {% elif curHour >= 9 and curHour < 11 %}
            {% set PP = true %}
          {% elif curHour >= 14 and curHour < 16 %}
            {% set PP = true %}
          {% elif curHour >= 21 and curHour < 23 %}
            {% set PP = true %}
          {% endif %}
        {% endif %}
        
        {% if not is_state('input_select.poolpump_mode', 'Winter/Off') and states.sensor.outdoor_temperature.state|float < 5.0 %}
          {% set PP = true %}
        {% endif %}

        {% set lastLevel = as_timestamp(now()) - as_timestamp(states.binary_sensor.pool_level_low.last_changed) %}
        {% if is_state('binary_sensor.pool_level_low', 'off') and lastLevel >= 120 %}
          {% set PP = false %}
        {% endif %}
        
        {% if PP == true %}
          switch.turn_on
        {% else %}
          switch.turn_off
        {% endif %}

  #Pool water level has to be below high level since 2 minutes
  #Pool pump mode shall not be in Winter mode
  #Filler valve can't operate more than 1.8h/day
  - alias: Pool Filler Control
    trigger:
      - platform: time_pattern
        seconds: '/5'
    action:
      entity_id: switch.pool_filler_valve
      service_template: >
        {% set lastLevel = as_timestamp(now()) - as_timestamp(states.binary_sensor.pool_level_high.last_changed) %}
        {% set PF = false %}
        
        {% if lastLevel >= 120 %}
          {% if is_state('binary_sensor.pool_level_high', 'off') %}
            {% set PF = true %}
          {% elif is_state('binary_sensor.pool_level_high', 'on') %}
            {% set PF = false %}
          {% endif %}
        {% endif %}
        
        {% if states.sensor.pool_filler_timer.state|float >= 1.8 %}
          {% set PF = false %}
        {% elif is_state('input_select.poolpump_mode', 'Winter/Off') %}
          {% set PF = false %}
        {% endif %}
                
        {% if PF == true %}
          switch.turn_on
        {% else %}
          switch.turn_off
        {% endif %}

  #Test input number
  - alias: Pool Drain Percent
    trigger:
    - platform: state
      entity_id: input_number.lg_ac_temperature
    action:
    - service: mqtt.publish
      data_template:
        topic: "Home/Pool/Test/Valve"
        payload_template: '{{ states.input_number.pool_drain_percent.state }}'
        qos: 0
        retain: true
        
  #Input Text Changes Trigger
  - alias: Pool Text Change
    trigger:
    - platform: state
      entity_id: input_text.pool_text_top
    - platform: state
      entity_id: input_text.pool_text_bottom
    action:
    - service: mqtt.publish
      data_template:
        topic: "Home/Pool/Clock/Text/Time"
        payload_template: >
          {% if is_state('input_text.pool_text_top', '') %}
            null
          {% else %}
            {{ states.input_text.pool_text_top.state }}
          {% endif %}
        qos: 0
        retain: true
    - service: mqtt.publish
      data_template:
        topic: "Home/Pool/Clock/Text/Temp"
        payload_template: >
          {% if is_state('input_text.pool_text_bottom', '') %}
            null
          {% else %}
            {{ states.input_text.pool_text_bottom.state }}
          {% endif %}
        qos: 0
        retain: true

  - alias: "Pool Clock Scroll Speed"
    initial_state: True
    hide_entity: False
    trigger:
    - platform: state
      entity_id: input_number.pool_clock_scroll_speed
    action:
    - service: mqtt.publish
      data_template:
        topic: "Home/Pool/Clock/Cmd"
        payload: '{"transition":{{ trigger.to_state.state | int }}}'
    
  - alias: Pool Visibility
    trigger:
    - platform: state
      entity_id: light.pool_clock
    action:
      service: group.set_visibility
      entity_id: group.pool_clock_settings
      data_template:
        visible: "{{ not is_state('light.pool_clock', 'unavailable') }}"
        
  #Publish data to device every minute or when a device requests an update (boot up or invalid data detected (by the device))
  - alias: Publish Generic Data
    trigger:
      - platform: time_pattern
        minutes: '/1'
      - platform: mqtt
        topic: "Home/Global/Time/Request"
        payload: 'ON'
        encoding: 'utf-8'
    action:
      - service: mqtt.publish
        data_template:
          topic: "Home/Pool/Clock/Water/Temp"
          payload_template: "{{ states.sensor.pool_temperature.state }}"
      # - service: mqtt.publish
        # data_template:
          # topic: "Home/Pool/Clock/Water/PH"
          # payload_template: "{{ states.sensor.pool_ph.state }}"
      - service: mqtt.publish
        data_template:
          topic: "Home/Pool/Clock/Water/PH"
          payload_template: "6.8"
      - service: mqtt.publish
        data_template:
          topic: "Home/Weather/Out/Temp"
          payload_template: "{{ states.sensor.outdoor_temperature.state }}"
      - service: mqtt.publish
        data_template:
          topic: "Home/Weather/Out/Hum"
          payload_template: "{{ states.sensor.outdoor_humidity.state }}"

  - alias: Pool Filler Timer
    trigger:
      - platform: time_pattern
        minutes: '/1'
    condition:
      - condition: state
        entity_id: switch.pool_filler_valve
        state: 'on'
    action:
      - service: counter.increment
        entity_id: counter.pool_water_filler_counter
        
  - alias: Pool Filler Timer Reset
    trigger:
      - platform: time
        at: '00:00:00'
    condition:
      - condition: state
        entity_id: switch.pool_filler_valve
        state: 'off'
        for: "24:00:00"
    action:
      - service: counter.reset
        entity_id: counter.pool_water_filler_counter
          