switch:
  - platform: mqtt
    name: Lamp Post
    state_topic: "Home/Control/Relay/Stts"
    command_topic: "Home/Control/Relay/Cmd"
    value_template: '{{ value_json.relay9 }}'
    availability_topic: "Home/Control/LWT"
    payload_on: '{"relay9":"ON"}'
    payload_off: '{"relay9":"OFF"}'
    state_on: "ON"
    state_off: "OFF"
    payload_available: "online"
    payload_not_available: "offline"
    qos: 0
    
  - platform: mqtt
    name: Power Outlet
    state_topic: "Home/Control/Relay/Stts"
    command_topic: "Home/Control/Relay/Cmd"
    value_template: '{{ value_json.relay10 }}'
    availability_topic: "Home/Control/LWT"
    payload_on: '{"relay10":"ON"}'
    payload_off: '{"relay10":"OFF"}'
    state_on: "ON"
    state_off: "OFF"
    payload_available: "online"
    payload_not_available: "offline"
    qos: 0
    
  - platform: mqtt
    name: Backyard Irrigation
    state_topic: "Home/Control/Relay/Stts"
    command_topic: "Home/Control/Relay/Cmd"
    value_template: '{{ value_json.relay1 }}'
    availability_topic: "Home/Control/LWT"
    payload_on: '{"relay1":"ON"}'
    payload_off: '{"relay1":"OFF"}'
    state_on: "ON"
    state_off: "OFF"
    payload_available: "online"
    payload_not_available: "offline"
    qos: 0
    
  - platform: mqtt
    name: Frontyard Irrigation
    state_topic: "Home/Control/Relay/Stts"
    command_topic: "Home/Control/Relay/Cmd"
    value_template: '{{ value_json.relay2 }}'
    availability_topic: "Home/Control/LWT"
    payload_on: '{"relay2":"ON"}'
    payload_off: '{"relay2":"OFF"}'
    state_on: "ON"
    state_off: "OFF"
    payload_available: "online"
    payload_not_available: "offline"
    qos: 0

  - platform: mqtt
    name: Pond Filler Valve
    state_topic: "Home/Control/Relay/Stts"
    command_topic: "Home/Control/Relay/Cmd"
    value_template: '{{ value_json.relay3 }}'
    availability_topic: "Home/Control/LWT"
    payload_on: '{"relay3":"ON"}'
    payload_off: '{"relay3":"OFF"}'
    state_on: "ON"
    state_off: "OFF"
    payload_available: "online"
    payload_not_available: "offline"
    qos: 0
    
  - platform: mqtt
    name: Water Valve Close
    state_topic: "Home/Control/Relay/Stts"
    command_topic: "Home/Control/Relay/Cmd"
    value_template: '{{ value_json.relay7 }}'
    availability_topic: "Home/Control/LWT"
    payload_on: '{"relay7":"ON"}'
    payload_off: '{"relay7":"OFF"}'
    state_on: "ON"
    state_off: "OFF"
    payload_available: "online"
    payload_not_available: "offline"
    qos: 0
    
  - platform: mqtt
    name: Water Valve Open
    state_topic: "Home/Control/Relay/Stts"
    command_topic: "Home/Control/Relay/Cmd"
    value_template: '{{ value_json.relay8 }}'
    availability_topic: "Home/Control/LWT"
    payload_on: '{"relay8":"ON"}'
    payload_off: '{"relay8":"OFF"}'
    state_on: "ON"
    state_off: "OFF"
    payload_available: "online"
    payload_not_available: "offline"
    qos: 0
    json_attributes_topic: "Home/Control/Json"
    
sensor:
  - platform: mqtt
    name: "ControlRoom Box Temperature"
    state_topic: "Home/Control/Json"
    unit_of_measurement: '°C'
    value_template: "{{ value_json.temp_in }}"
    availability_topic: "Home/Control/LWT"
    payload_available: "online"
    payload_not_available: "offline"
    qos: 0
    json_attributes_topic: "Home/Control/Json"
    
  - platform: mqtt
    name: "ControlRoom Box Humidity"
    icon: mdi:water-percent
    state_topic: "Home/Control/Json"
    unit_of_measurement: '%'
    value_template: "{{ value_json.hum_in }}"
    availability_topic: "Home/Control/LWT"
    payload_available: "online"
    payload_not_available: "offline"
    qos: 0
    json_attributes_topic: "Home/Control/Json"
    
  - platform: mqtt
    name: "Cold Storage Temperature"
    state_topic: "Home/Control/Json"
    unit_of_measurement: '°C'
    value_template: "{{ value_json.temp_out }}"
    availability_topic: "Home/Control/LWT"
    payload_available: "online"
    payload_not_available: "offline"
    qos: 0
    json_attributes_topic: "Home/Control/Json"
    
  - platform: mqtt
    name: "Cold Storage Humidity"
    icon: mdi:water-percent
    state_topic: "Home/Control/Json"
    unit_of_measurement: '%'
    value_template: "{{ value_json.hum_out }}"
    availability_topic: "Home/Control/LWT"
    payload_available: "online"
    payload_not_available: "offline"
    qos: 0
    json_attributes_topic: "Home/Control/Json"

  - platform: template
    sensors:
      water_valve_status:
        friendly_name: "Water Valve Status"
        value_template: >
          {% if (states.binary_sensor.water_valve_opened.state == 'off') and (states.binary_sensor.water_valve_closed.state == 'on') %}
            Opened
          {% elif (states.binary_sensor.water_valve_closed.state == 'off') and (states.binary_sensor.water_valve_opened.state == 'on') %}
            Closed
          {% else %}
            Unknown
          {% endif %}
        icon_template: >
          {% if (states.binary_sensor.water_valve_opened.state == 'off') and (states.binary_sensor.water_valve_closed.state == 'on') %}
            mdi:pipe
          {% elif (states.binary_sensor.water_valve_closed.state == 'off') and (states.binary_sensor.water_valve_opened.state == 'on') %}
            mdi:pipe-disconnected
          {% else %}
            mdi:help
          {% endif %}
        attribute_templates:
          opened: >
            {% if is_state('binary_sensor.water_valve_opened', "off") %}
              on
            {% else %}
              off
            {% endif %}
          closed: >
            {% if is_state('binary_sensor.water_valve_closed', "off") %}
              on
            {% else %}
              off
            {% endif %}
            
binary_sensor:
  - platform: mqtt
    name: Water Valve Opened
    state_topic: "Home/Control/Json"
    availability_topic: "Home/Control/LWT"
    payload_available: "online"
    payload_not_available: "offline"
    value_template: '{{ value_json.water_off }}'
    qos: 0
    
  - platform: mqtt
    name: Water Valve Closed
    state_topic: "Home/Control/Json"
    availability_topic: "Home/Control/LWT"
    payload_available: "online"
    payload_not_available: "offline"
    value_template: '{{ value_json.water_on }}'
    qos: 0
    
  - platform: template
    sensors:
      poweroutlet_status:
        friendly_name: Power Outlet
        entity_id: 
          - switch.power_outlet
          - input_select.poweroutlet_mode
        value_template: >
          {{ is_state('switch.power_outlet', 'on') }}
        availability_template: >
          {{ not is_state('switch.power_outlet', 'unavailable') }}
        icon_template: >
          {% if is_state('input_select.poweroutlet_mode', 'Halloween Decorations') %}
            mdi:pumpkin
          {% elif is_state('input_select.poweroutlet_mode', 'Christmas Decorations') %}
            mdi:pine-tree
          {% elif is_state('input_select.poweroutlet_mode', 'Fountain') %}
            mdi:fountain
          {% elif is_state('input_select.poweroutlet_mode', '24/7') %}
            mdi:power-plug
          {% else %}
            mdi:power-plug-off
          {% endif %}
          
      lamppost_status:
        friendly_name: Lamp Post
        entity_id: 
          - switch.lamp_post
          - input_select.lamppost_mode
        value_template: >
          {{ is_state('switch.lamp_post', 'on') }}
        availability_template: >
          {{ not is_state('switch.lamp_post', 'unavailable') }}
        icon_template: >
          {% if is_state('input_select.lamppost_mode', 'Force Off') %}
            mdi:lightbulb-off
          {% else %}
            mdi:lightbulb
          {% endif %}
          
customize:
  switch.water_valve_open:
    icon: mdi:pipe
    templates:
      icon: >
        return 'mdi:pipe';
      icon_color: >
        if (state === 'on') return 'var(--state-icon-active-color)';
        if (state === 'unavailable') return 'var(--state-icon-unavailable-color)';
        return 'var(--state-icon-color)';
          
  switch.water_valve_close:
    icon: mdi:pipe-disconnected
    templates:
      icon: >
        return 'mdi:pipe-disconnected';
      icon_color: >
        if (state === 'on') return 'var(--state-icon-active-color)';
        if (state === 'unavailable') return 'var(--state-icon-unavailable-color)';
        return 'var(--state-icon-color)';
        
  binary_sensor.lamppost_status:
    templates:
      icon_color: >
        if (state === 'on') return 'var(--state-icon-active-color)';
        if (state === 'unavailable') return 'var(--state-icon-unavailable-color)';
        return 'var(--state-icon-color)';
        
  binary_sensor.poweroutlet_status:
    templates:
      icon_color: >
        if (state === 'on') return 'var(--state-icon-active-color)';
        if (state === 'unavailable') return 'var(--state-icon-unavailable-color)';
        return 'var(--state-icon-color)';
        
  sensor.water_valve_status:
    custom_ui_state_card: state-card-custom-ui
    friendly_name: "Water Valve State"
    templates:
      icon_color: >
        if (state === 'Unknown') return 'var(--state-icon-active-color)';
        if (state === 'Opened') return 'var(--state-icon-active-color)';
        return 'var(--state-icon-color)';
        
automation:
  - alias: Water valve ON
    trigger:
      - platform: state
        entity_id: switch.water_valve_open
        to: 'on'
      - platform: state
        entity_id: switch.water_valve_open
        to: 'on'
        for: '00:00:08'
      - platform: state
        entity_id: sensor.water_valve_status
        to: 'Opened'
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: switch.water_valve_open
          state: 'on'
        - condition: state
          entity_id: sensor.water_valve_status
          state: 'Opened'
        # - condition: numeric_state
          # entity_id: sensor.outdoor_temperature
          # below: 2
    action:
      service: switch.turn_off
      entity_id: switch.water_valve_open
      
  - alias: Water valve OFF
    trigger:
      - platform: state
        entity_id: switch.water_valve_close
        to: 'on'
      - platform: state
        entity_id: switch.water_valve_close
        to: 'on'
        for: '00:00:08'
      - platform: state
        entity_id: sensor.water_valve_status
        to: 'Closed'
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: switch.water_valve_close
          state: 'on'
        - condition: state
          entity_id: sensor.water_valve_status
          state: 'Closed'
    action:
      service: switch.turn_off
      entity_id: switch.water_valve_close
      
  - alias: Lamp Post Control
    trigger:
      - platform: time_pattern
        seconds: '/1'
      - platform: state
        entity_id: input_select.lamppost_mode
    action:
      entity_id: switch.lamp_post
      service_template: >
        {% set time = now().hour %}
        {% set LP = false %}
        {% if is_state('input_select.lamppost_mode', '24/7') %}
          {% set LP = true %}
        {% elif is_state('input_select.lamppost_mode', 'Sunset to 23h')  %}
          {% set LP = is_state('sun.sun', 'below_horizon') and time > 12 and time < 23 %}
        {% elif is_state('input_select.lamppost_mode', 'COVID-19') %}
          {% if now().hour == 20 and now().minute == 30 %}
            {% set LP = is_state('sensor.flashing_1s', 'on') %}
          {% else %}
            {% set LP = is_state('sun.sun', 'below_horizon') and time > 12 and time < 23 %}
          {% endif %}
        {% endif %}
        
        {% if LP == true %}
          switch.turn_on
        {% else %}
          switch.turn_off
        {% endif %}
      
  - alias: Power Outlet Control
    trigger:
      - platform: time_pattern
        seconds: '/5'
      - platform: state
        entity_id: input_select.poweroutlet_mode
    action:
      entity_id: switch.power_outlet
      service_template: >
        {% set time = now().hour %}
        {% set date = now().strftime("%m-%d") %}
        {% set sunset_hour = as_timestamp(states.sun.sun.attributes.next_setting)|int %}
        {% set sunset_hour = sunset_hour - 60*60 %}
        {% set sunset_early = (sunset_hour | timestamp_custom('%H:%M')) < (as_timestamp(now()) | timestamp_custom('%H:%M')) %}
        {% set PO = false %}
        {% if is_state('input_select.poweroutlet_mode', '24/7') %}
          {% set PO = true %}
        {% elif is_state('input_select.poweroutlet_mode', 'Fountain') %}
          {% if is_state('sun.sun', 'below_horizon') and time < 22 %}
            {% set PO = true %}
          {% elif states.sensor.outdoor_temperature.state|float < 5.0 %}
            {% set PO = true %}
          {% endif %}
        {% elif is_state('input_select.poweroutlet_mode', 'Halloween Decorations') %}
          {% if (sunset_early or time >= 16) and time < 23 %}
            {% set PO = true %}
          {% elif date == "10-31" and time >= 7 %}
            {% set PO = true %}
          {% endif %}
        {% elif is_state('input_select.poweroutlet_mode', 'Christmas Decorations') %}
          {% if (sunset_early or time >= 16) and time < 23 %}
            {% set PO = true %}
          {% elif (date == "12-24" and time >= 7) or date == "12-25" %}
            {% set PO = true %}
          {% endif %}
        {% endif %}
        
        {% if PO == true %}
          switch.turn_on
        {% else %}
          switch.turn_off
        {% endif %}
        
views:
- title: Parameters
  icon: mdi:wrench
  # Unique path for direct access /lovelace/${path}
  path: params
  visible: true
  cards:
    - type: entities
      title: Water Entrance
      show_header_toggle: false
      entities:
        - type: custom:fold-entity-row
          head: sensor.water_valve_status
          entities:
            - type: "custom:button-entity-row"
              buttons:
                - entity: switch.water_valve_open
                  name: Turn ON
                - entity: switch.water_valve_close
                  name: Turn OFF
            - automation.water_valve_force_off
            - automation.water_valve_off
            - automation.water_valve_on
    - type: entities
      title: Control Room Box
      show_header_toggle: false
      entities:
        - sensor.controlroom_box_temperature
        - sensor.controlroom_box_humidity
        